---
title: "Data wrangling + functions"
subtitle: "Challenge 2"
author: "YOUR NAME"
format: 
  html:
    self-contained: true
---

# Instructions

Complete all parts of the Exercises section below to earn a Pass for this challenge.

**Submission:** Click the "Render" button in RStudio to knit a self-contained HTML with all images embedded. Commit and push changes to this file as well as the generated HTML. Push your changes to GitHub by midnight on Friday 3/8. (GitHub classroom automatically creates a pull request for receiving feedback.)



# Exercise 1: `recycling_checker()`

- **Inputs:**
    - `x1` and `x2`: two numeric vectors
- **Function purpose:** Print a helpful message to the user warning them if dangerous vector recycling will happen when they try to combine the two vectors with some arithmetic operation.
    - If the vectors are not of the same length, provide informational text. See examples below for how to format this text.
        - Example 1: `x1` is length 4 and `x2` is length 2. Informational text: "x1 and x2 are not the same length. To match the length of x1, x2 will be repeated 2 times. You will not get a warning when you combine these two vectors, but just be wary that vector recycling is occurring."
        - Example 2: `x1` is length 3 and `x2` is length 11. Informational text: "x1 and x2 are not the same length. To match the length of x2, x1 will be repeated 3 times fully with the first 2 elements repeated again. You will get a warning when you combine these two vectors."

```{r recycling_checker}
# Write your function here


# Include test cases to show that your function fully works

```





# Exercise 2: `days_to_birthday()`

- **Function purpose:** Display the number of days from a user-supplied day to the user's next birthday.
- **Inputs:**
    - `birthday`: A string in month-day-year format giving the user's birthday
    - `from_when`: A string in month-day-year format. The number of days from this day to the user's upcoming birthday will be printed for the user. Set the default value for this argument to be "today".
- **Notes:**
    - Your function should be able to handle all of the following date formats: "Jan 1 2000", "January 1 2000", "Jan 1, 2000", "January 1, 2000", "1/1/2000", "1-1-2000".
    - The `lubridate` [cheat sheet](https://rstudio.github.io/cheatsheets/lubridate.pdf) will be helpful.
    - You can subtract date objects with `-`.

```{r days_to_birthday}
# Write your function here


# Include test cases to show that your function fully works

```





# Exercise 3: `course_names_to_df()`

- **Function purpose:** Take a character vector of course numbers and names and store the different pieces of information in a data frame. See code chunk below for example output.
- **Inputs:**
    - `courses`: A character vector of course numbers and names. See code chunk below for an example.
    - `separate_cross_list`: A `TRUE/FALSE` indicator of whether a cross-listed course should have the two departments separated into 2 variables. Have the default value be `TRUE`.
- **Notes:**
    - Use regular expressions with the `str_extract()` function in the `stringr` package to write this function.

```{r course_names_to_df}
# Write your function here


# Include test cases to show that your function fully works
course_names <- c("STAT/COMP 212: Intermediate Data Science", "STAT 155: Introduction to Statistical Modeling", "LING 175: Sociolinguistics")
# The output for the above courses should look like the following:
# If separate_cross_list is TRUE
tibble(
    dept1 = c("STAT", "STAT", "LING"),
    dept2 = c("COMP", NA, NA),
    course_num = c(212, 155, 175),
    course_name = c("Intermediate Data Science", "Introduction to Statistical Modeling", "Sociolinguistics")
)
# If separate_cross_list is FALSE
tibble(
    dept = c("STAT/COMP", "STAT", "LING"),
    course_num = c(212, 155, 175),
    course_name = c("Intermediate Data Science", "Introduction to Statistical Modeling", "Sociolinguistics")
)
```



